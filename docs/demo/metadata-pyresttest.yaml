# Tests of metadata service.
# Notes on json validation:
#   must supply count or expected
#   if supply expected can optionally specify operator
#   operator defaults to "eq", available values are: abs contains eq ge gt index inv invert le lt ne neg not pos truth
#   operator is applied as: <actual> <operator> <expected>
# Priority:
#   basically indicates order of execution
#   same priority means can be executed in parallel
#   lower number is more important and gets executed first
---
- config:
    - testset: "Metadata Test"

# Tests that do not require any specific state.

- test: # verify get verisons for invalid entity
    - priority: 0
    - url: "/metadata/ThisEntityDoesNotExist" 
    - group: "metadata/find"
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {type: "json", query: "versions", count: 0}

# Verify initial state.

- test: # verify initial state, should not have any versions for the entity being tested
    - priority: 0
    - url: "/metadata/${ENTITY_NAME}"
    - group: "metadata/find"
    - validators:
        - {type: "json", query: "entities", count: 0}

# Create v1 of the entity.

- test: # create entity
    - priority: 10
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_1}"
    - group: "metadata/insert"
    - method: "PUT"
    - body: {file: "test-metadata-insert.json"}

# Verify v1.

- test: # verify getting entity name list
    - priority: 20
    - url: "/metadata" 
    - group: "metadata/find"
    - method: "GET"
    - expected_status: 200
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {type: "json", query: "entities", operator: "gt", expected: 0}
        - {type: "json", query: "entities", operator: "contains", expected: "${ENTITY_NAME}"}
- test: # verify get verisons for valid entity
    - priority: 20
    - url: "/metadata/${ENTITY_NAME}"
    - group: "metadata/find"
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {type: "json", query: "versions", operator: "eq", expected: 1}
- test: # verify get specific version
    - priority: 20
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_1}"
    - group: "metadata/find"
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {type: "json", query: "entityInfo/name", operator: "eq", expected: "${ENTITY_NAME}"}
        - {type: "json", query: "entityInfo/defaultVersion", operator: "empty"}
        - {type: "json", query: "schema/version/value", operator: "eq", expected: "${ENTITY_VERSION_1}"}
        - {type: "json", query: "schema/status/value", operator: "eq", expected: "active"}

# Create v2 of the entity.

- test: # create entity
    - priority: 30
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_2}"
    - group: "metadata/insert"
    - method: "PUT"
    - body: {file: "test-metadata-update-v2.json"}

# Verify v2.

- test: # verify getting entity name list
    - priority: 40
    - url: "/metadata" 
    - group: "metadata/find"
    - method: "GET"
    - expected_status: 200
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {type: "json", query: "entities", operator: "gt", expected: 0}
        - {type: "json", query: "entities", operator: "contains", expected: "${ENTITY_NAME}"}
- test: # verify get verisons for valid entity
    - priority: 40
    - url: "/metadata/${ENTITY_NAME}"
    - group: "metadata/find"
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {type: "json", query: "versions", operator: "eq", expected: 2}
- test: # verify get specific version (v1 is still active)
    - priority: 40
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_1}"
    - group: "metadata/find"
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {type: "json", query: "entityInfo/name", operator: "eq", expected: "${ENTITY_NAME}"}
        - {type: "json", query: "entityInfo/defaultVersion", operator: "empty"}
        - {type: "json", query: "schema/version/value", operator: "eq", expected: "${ENTITY_VERSION_1}"}
        - {type: "json", query: "schema/status/value", operator: "eq", expected: "active"}
- test: # verify get specific version (v2 exists and is active)
    - priority: 40
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_2}"
    - group: "metadata/find"
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {type: "json", query: "entityInfo/name", operator: "eq", expected: "${ENTITY_NAME}"}
        - {type: "json", query: "entityInfo/defaultVersion", operator: "empty"}
        - {type: "json", query: "schema/version/value", operator: "eq", expected: "${ENTITY_VERSION_2}"}
        - {type: "json", query: "schema/status/value", operator: "eq", expected: "active"}

# Update entity info, add an index.

- test: # verify has no index initially
    - priority: 50
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_2}"
    - group: "metadata/find"
    - method: "GET"
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {type: "json", query: "entityInfo/name", operator: "eq", expected: "${ENTITY_NAME}"}
        - {type: "json", query: "entityInfo/indexes", count: 0}
- test: # add index
    - priority: 60
    - url: "/metadata/${ENTITY_NAME}"
    - group: "metadata/update"
    - method: "PUT"
    - body: {file: "test-metadata-update-index.json"}
- test: # verify has index after update
    - priority: 50
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_2}"
    - group: "metadata/find"
    - method: "GET"
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {type: "json", query: "entityInfo/name", operator: "eq", expected: "${ENTITY_NAME}"}
        - {type: "json", query: "entityInfo/defaultVersion", operator: "empty"}
        - {type: "json", query: "entityInfo/indexes", count: 1}

# Test default functionality
# NOTE previous tests must have verified that each version is NOT default

- test: # make v2 default
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_1}/default"
    - group: "metadata/update"
    - method: "POST"
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {type: "json", query: "entityInfo/name", operator: "eq", expected: "${ENTITY_NAME}"}
        - {type: "json", query: "schema/version/value", operator: "eq", expected: "${ENTITY_VERSION_2}"}
        - {type: "json", query: "entityInfo/defaultVersion", operator: "eq", value: "${ENTITY_VERSION_2}"}

# Deprecated v1.

- test: # do deprecation
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_1}/deprecated?comment=testing+deprecation"
    - group: "metadata/update"
    - method: "PUT"
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {type: "json", query: "entityInfo/name", operator: "eq", expected: "${ENTITY_NAME}"}
        - {type: "json", query: "schema/version/value", operator: "eq", expected: "${ENTITY_VERSION_1}"}
        - {type: "json", query: "schema/status/value", operator: "eq", expected: "deprecated"}
        - {type: "json", query: "schema/status/changelog", operator: "eq", expected: "testing deprecation"}
- test: # verify find gets same deprecated version
    - url: "/metadata/${ENTITY_NAME}/${ENTITY_VERSION_1}"
    - group: "metadata/find"
    - method: "GET"
    - validators: # operator is applied as: <actual> <operator> <expected>
        - {type: "json", query: "entityInfo/name", operator: "eq", expected: "${ENTITY_NAME}"}
        - {type: "json", query: "schema/version/value", operator: "eq", expected: "${ENTITY_VERSION_1}"}
        - {type: "json", query: "schema/status/value", operator: "eq", expected: "deprecated"}
        - {type: "json", query: "schema/status/changelog", operator: "eq", expected: "testing deprecation"}

